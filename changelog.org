* v0.4.0

- removal of the internal dataframe. This has been made a standalone
  package: [[https://github.com/SciNim/Datamancer][Datamancer]]
- runtime errors regarding empty columns, determination of
  discreteness and DF columns with object like data have been improved
  significantly. Added info messages for auto determination of types.
- floating point columns are now always treated as continuous columns
  by default (which is a breaking change). To overwrite use
  =scale_x/y/..._discrete= or simply =factor(col)= in =aes=. Fixes
  issue #91.
  
* v0.3.26
- *major* rewrite of the formula macro. Behavior is essentially the
  same, but more robust, generalizes better and fully working index /
  column specification and *much* better automatic type deduction.
- =filter= can now take a scalar (reducing) formula returning a
  bool. Useful in combination with a =group_by= call
- fixed stacking of histograms in case of =hdOutline= ("lowest"
  element was ignored)
- =readCsvTyped= is now the default CSV parser
* v0.3.25
- fix issue #110; facets now support multiple geoms in one facet plot
- add classifying using shapes (marker kind & line shape). However,
  only 2 marker kinds are implemented at this point. Multiple line
  shapes exist at least.
- build foundation to support arbitrarily scaled secondary axes. This
  feature is not working for most transformations yet, due to the
  implementation of how transformed ticks are computed.    
* v0.3.24
- better handling of ticks
- secondary axes can now be a transformed version of the primary axes
- =unique= has a =keepAll= option, which keeps all column in the
  resulting DF and not only those for which the unique check is
  performed
- fix bug in =readCsvTyped= for CSV files without an empty line at the
  end
- allow =nnkBracketExpr=, =nnkCurly= in formulas
- fix issue in =gather= when gathering a DF with multiple column
  types. Type of the gathered columns took all DF columns into
  account, even those not gathered.
- =readCsvTyped= now handles rows with more =,= than in the header. In
  that case all columns after the number of columns from the header
  have been parsed are simply skipped.
- add =fillColor= to =geom_histogram=. Previously the =color= argument
  was used to set both the color (outline) as well as fill color of
  the drawn histogram. Now those are separate. This is a *breaking*
  change though! Makes it easy to set e.g. the outline to transparent
  by assigning a transparent color to =color=, but still have a filled
  body.
- change default tick label margin to be based on font height (by
  default 1.25 / 1.75 for y / x labels)
- fix drawing first bin when histogram using outlines
- =numX/Y= are now ignored for =geom_raster= and are computed
  internally
- raise an exception if no fill scale present for =geom_raster=
- support column to string tensor conversion
* v0.3.23
This version was accidentally skipped, oops.  
* v0.3.22

- to use =ggvega= import =gglotnim/ggplot_vega= (not imported by
  default anymore)
- add a simple Vega-Lite recipe: =rSimpleVegaLite.nim= (this recipe is
  *not* part of the CI yet)
* v0.3.21
- show tick labels for log plots if no full power of 10 visible 
- facet_wrap fixes:
  - apply tick rotations to tick labels
  - use =numXTicks= for x ticks of the =GgPlot= object instead of a
    default of 10 ticks
  - fix bug affecting range computation in facet wraps if the scales
    are set to free and an additional global classification was
    applied
  - apply reversal of scales in facet wrap
- allow changing the number of desired ticks in =ggplot= call (differs
  from ggplot2 where this is done using =scale_*= functions)
- apply reversal of x/y scales to discrete axes correctly
- do not ignore number of ticks for log10 scales
- fix issues with =aes= macro for certain ways to call it
- add =hideLegend= proc to hide legends even if otherwise drawn
- add =color= argument to =theme_void= to be able to set different
  background color on empty themes (joyplots anyone?)
- adds asserts to =DataFrame= access (not =doAssert= though, still be
  careful in danger builds!)
- initialize =DataFrame= if trying to assign a column to an
  uninitialized DF
- add missing =alpha= option for =geom_point=
- misc. fixes for ARC support:
- avoid =deepCopy= when cloning a =DataFrame= (leads to segfaults with
  laser based arraymancer tensors, which are =ptr + len= pairs)
- allow =column.add= for first argument uninitialized
- *massively* improve raster performance by bypassing almost all slow
  code branches for dataframes / large number of different styles
  - currently breaks =position= argument for raster plots!
- export =asgn= proc, which bypasses the length check of the DF one
  assignes a column to. Can be handy to have outside of the main code
  base for optimization purposes.
- add ~[]=~ taking a filtering =FormulaNode= and key and assigning a constant
  value to each matching row, e.g.
  ~df[f{`colA` > x and `colB` < y, "colC"] = z~
- add =add= proc taking a tuple to add a single row to a DF. Warning,
  this reallocates every tensor in the DF with length + 1. Only use
  this for very few adds.
- misc style fixes
- adds new drawing option for histogram, by drawing histograms as
  outlines:
  #+begin_quote
  Adds the option to draw histograms either as individual bars, which
  sit right next to each other (hdBars) or as a line showing the
  outline (hdOutline).

  The latter is useful if one wants to avoid aliasing / moirÃ© like
  effects of individual bars (some white visible between touching bars).

  Also if one wishes to draw histograms using some alpha (or without any
  fill at all) not seeing the individual bars might be desirable.

  The default remains drawing individual bars for now.
  #+end_quote
- histogram: line width of the outline is now customizable
- add =scale_*_log2= 
- make transformed data more general by adding inverse transformation,
  which allows for arbitrary user definable data transformations
- add =scale_color_continuous= to control value range of continuous
  color (=scColor= instead of =scFillColor=)
- add =map=, =map_inline= for =Column= for simple
  convenience. =map_inline= tries to "determine" the type of the
  operation automatically, but this means we compile a runtime
  exception for branches of =map_inline= that are not supported,
  e.g. a =c.map_inline(a + b)= will raise if =c= is actually a string
  column
- add =showVega= webview viewer:
  ggvega now works in the following way:
  - no argument given: open the file as webview with the HTML stored in
    the tmp directory as `vega_lite_plot.html`
  - filename given:
    - if filename ends with `json`: store json in given filename, do not
    open a vega view
    - if filename does not end with `json`: store HTML in given filename
    and open webview
- add =facetMargin= proc to control the used margin in a facet plot
- make =mutate/transmute= work on grouped dataframes by acting on each
  group with each formula instead of the whole DF
- miscellaneous code reorderings and refactoring
- =runRecipes.nim= is partially deprecated. Instead of compiling and
  running each recipe individually, we now have =allRecipes.nim=,
  which simply imports all recipe files and thus replaces N
  compilations by 1.
- replace Travis CI by Github Actions
  - we now run CI on Linux, OSX and Windows. Note that OSX and Windows
    result in slightly different plots due to differences in
    fonts. Thus, some tests are not as stringent (or disabled) on
    these platforms
- docs are now autogenerated
- added new recipes:
  - =rHistogramOutline=: showases drawing histograms as outlines
  - =rRidgeLineGauss=: a simple example of a ridgeline plot as well as
    showcasing that formulas can be applied to each labels of a
    classified geom
  - =rRidgeLineGaussBlack=: the same plot in "prettier"
  - =rJoyplot=: the same plot again, this time as a full "Joyplot"
- =evaluate= can now evaluate a formula of kind =fkScalar=. This is
  useful to get a Column with a single element from a reduce operation
  and comes into play when using a reduce operation for an aesthetic,
  e.g. ~x = f{mean(`someCol`)}~
    
* v0.3.20
- fix a bug that causes the =arrange= proc to mess up sorting if more
  than one key is used. The last row of the DF was not sorted before
  and thus remained in unsorted order at the end of the sorted result.
- =geom_errorbar= now takes an =errorBarKind= field to set the kind of
  errorbar to draw
  - =ebLinesT=, =ebLines= are the only two options atm
- add =scale_fill_continuous= to force the fill scale to be
  interpreted as continuous values
- =ggsave= will now create the directories contained in the path given
  to it instead of silently not creating a plot if the path to the
  given file does not exist yet.
- attempt to get rid of duplicate legends in case of certain ggplot calls
- fix bug causing accessing =labs= sequence for log10 tick values, in
  case the tick labels were hidden (e.g. log10 facet_wrap).
- add *experimental* =legendOrder= proc to reorder the elements in a
  legend by a permutation of the "correct" order. Not the most user
  friendly and untested.
- add automatic wrapping of long lines in the title of a plot
- support manual wrapping in the title of a plot
* v0.3.19
- allow =nnkCommand= nodes for =aes= macro
* v0.3.18
- allow setting custom margin of the plot using =margin=
- add recipe for custom margins: =rCustomMargins.nim=
* v0.3.17
- add =scale_fill/color/size_manual= to provide custom colors / sizes
  for such mappings
- add a recipe showing custom fillings, =rCustomFill.nim=
* v0.3.16
- add =drop_null= to drop =VNull= values from a single or multiple
  columns in a data frame
- add =toNativeColumn=, which attempts to convert an object column to
  a native column
* v0.3.15
- add geom raster for efficient drawing of evenly spaced tile maps
  (e.g. many pixel heatmaps)
- make code ready for =--gc:arc= by removing =deepCopy= calls
- allow real constant columns in data frame (only store a single
  value), which behave like real columns
- slight code clean up
- data frame meta information now returned by pretty instead of being
  echoed
- data frame now uses =OrderedTable= to properly keep order of keys
- fix setting custom limits on facet wrapped plots
- add 3 new recipes:
  - =rPointInPolygons.nim=: a random recipe that came up as an idea during a
    discussion. Calculates whether points are in a polygon and draws
    them with a color depending on that
  - =rSimpleRaster.nim=: a simple example of a 256x256 pixel raster
  - =rFacetRaster.nim=: an example of plotting two 256x256 pixel
    rasters in a facet

* v0.3.14
- hotfix release to unbreak Nim CI
  -> fixes a regression due to an additional field in ginger, for
  which by default no =%= is provided in json.nim
* v0.3.13
- make =aes= a macro
  - allows for named / unnamed arguments
  - raw identifiers will be interpreted as strings, if not symbol is
    declared with the identifiers name
  - =factor= can be applied to an argument to force this scale to be
    discrete. For every scale that is not x/y this wasn't possible
    (for x/y via =scale_x/y_discrete=)
- provide better error messages for some mixtures of geoms +
  continuous scales
* v0.3.12
- =GgPlot= is not a generic anylonger. Originally the idea was to
  provide support for multiple data types, but nowadays the code base
  is too intertwined with the =DataFrame= that this doesn't make sense
  anylonger and in fact produces problems (e.g. "undeclared
  identifier" when combining implicit generic + template)
- fix for Nim devel regarding change of named / not named tuples 
- avoid usage of =random= which is now removed on devel
* v0.3.11
Hotfix for Nim devel by @timotheecour. Fixes issues regarding lent
iterators.
* v0.3.10
- fix bug in =add= for data frames if first argument was still =nil= 
- allow multiple types in =innerJoin=, requirement is that columns to
  be combined are compatible (mainly means int + float -> float)
- add some tests for =innerJoin=
* v0.3.9
- add support for weighted bin count statistics (=weight= field for
  e.g. =geom_histogram=)
- add suport for =density= computation when using bin count statistics 
  (=density= argument to =geom_*= procedures)
- add two recipes:
  - =rWeightedHistogram.nim=: histogram of carat of diamonds weighted
    by price
  - =rHistogramDensity.nim=: histogram of carat of diamonds as a
    density instead of counts
* v0.3.8
Hotfix for broken CI, due to one recipe =rFormatDatesPlot.nim= being
dependent on time recipe is being run.
* v0.3.7
- tick labels can now be provided to =scale_x/y_discrete/continuous=
  via a callback, PR #70 by @cooldome
- adds two recipes:
  - =rFormatDecimalsPlot=: example to provide custom formatting for
    decimals in tick labels
  - =rFormatDatesPlot=: example to provide custom formatting for dates
    as tick labels

* v0.3.6
- hot fix for =nimIdentNormalize= usage in =1.2.x= by accident (only
  available from =1.3.x=)
* v0.3.5
- =facet_wrap= is finally back! Now finally allows to fix / not fix
  the scale of each subplot and wrap by multiple columns.
- fix pretty printing of =VObject Value=
- add =toObject= overload for =Value= taking =(string, Value)=
- add =contains= for Value in Value, which checks whether one
  =VObject= contained in another
- =yieldData= of =FilledGeom= is now keyed only by the =label (VObject
  Value)= comprising the discrete values of N columns for the given
  object, instead of baseStyle + label. This allows to access a
  specific style / data frame for a given label (ridgeline plots +
  facet need this).
- =handleTicks= now still creates ticks and labels if =hideTickLabels=
  is true, but doesn't assign them to the viewport. This way they can
  still be accessed to e.g. draw grid lines.
- =handleTicks= now handles custom margins
- =facet_wrap= now also takes raw strings and a =scales= argument,
  which is used to fix the scales of all plots in a facet_wrap to the
  same scale or leave them free.
- =Theme= now has =x/yTickLabelMargin= fields to customize margin for x and
  y tick labels (currently not exposed, used internally for facet
  plots, create Theme manually and set them if required).
- add =BinByKind= / =binBy= field for ~statKind="bin"~  to allow
  binning to happen only on the current subset of data that is
  actually considered. Useful if the data is in multiple different
  ranges and binning should happen according to those ranges.
- the count column after a histogram call is now not always an object
  column. The last value contains the right most bin edge, the count
  column is now filled with a 0.
- =gather= can now again gather columns of different data types again
  (int + float is merged to float, other combinations to object
  colunms)
- =fn {}= formula syntax can now deal with =nnkTableConstr=
  (effectively allows type hints)
- now only a single list of recipes to test / run in
  ~recipes/recipeFiles.nim~, which is used in comparison test and
  ~runRecipes.nim~
- ~ggjson~ helper with same signature as ~ggsave~ to allow dumping
  final plot viewport to JSON file (used for CI)
- *all* recipes are now compared as JSON files!
- add two more recipes:
  - ~rSimpleFacet.nim~: simple facetting example using mpg dataset
  - ~rFacetTpa.nim~: facetting example using TimepixAnalysis data

* v0.3.4
- allow creation of colunms from other int and float types (other than
  =int64= and =float64=) via =toColumn=
- allow access of DF columns with mutability (~[]=~ returns ~var
  Column~)

* v0.3.3
- allow negative values in =geom_bar= and =geom_histogram= if identity
  statistics is used
  - add recipe =rNegativeBarPlot.nim= to showcase this
* v0.3.2

- updates ginger dependency, due to a ginger bug which under some
  circumstances could cause bugged drawings (e.g. for error bars with
  "T" like shape)

* v0.3.1
- fixes #61, by forcing the minimum y value to be 0 for =geom_bar= if
  identity statistics is being used.

* v0.3.0
- =aes= now not only accespts strings, but also numbers, which will
  also be wrapped in a =FormulaNode= of kind =fkVariable=. No need to
  manually create such a formula.
- add new recipes:
  - =rAutoColoredNeuralSpikes.nim=: example on how to create neural
    raster spike plot
  - =rCustomColoredNeuralSpikes.nim=: same
- add =scale_x/y_reverse= to reverse the x or y scales. Done by adding
  =FilledScales= fields =reversedX/Y=, which are set in
  =collectScales=. If any scale is reversed, the plot will be
  reversed.


* v0.2.21
- =summarize= now works reliably on data frames, which have been grouped
  by multiple columns
- fixes a few bugs regarding wrong length scales used
- fixed a possible assertion error, due to unsafe access of an
  `Option[T]` (wrong field checked in if)
- introduce =StyleLabel= to retain information about styles for
  discrete labels in =FilledGeom.yieldData=. Allows to know which
  style belongs to which label of a discrete scale.
- fix =assignBinFields= to actually use given argument instead of
  =result= from caling scope
- add theme fields to hide labels, ticks and tick labels
- add =theme_void=, an empty theme. No labels, ticks, tickLabels, grid
  lines, white background.
- use =pretty(Value ...)= for children of =VObject=
- do not collect text scales anymore. They're not used in the post
  processing stage. Only care about column (note: this may change, if
  we want to incorporate the string widths / heights into the plot
  scales!)
- do not crash if no label is present in =handleLabels= yet
- add ScaleKind for text: =scText= to not confuse text with x or y
  axes
- plot layout now differs for themes without labels and ticks. Only
  0.2 cm on LHS of plot instead of 2.5 cm
- =handleDiscreteTicks= now takes only labels instead of a full
  =Scale=
- =handleTicks= respects =hideLabels= and allows custom number of
  ticks (to call it from elsewhere, e.g. gradients)
- =handleTicks= can take a custom boundScale. Allows to call it for
  other uses.
- only yield scales that show up as legends by =enumerateScalesByIds=
  iterator
- =addIdentityData= during collection now preallocates space for data
- add ridgeline plots; accessed by applying =ggridges= to a
  plot. Ridges are not really a geom, but rather a specific feature
  similar to facets. Essentially an aesthetic =yRidges= is added,
  by which is classified. Each labels gets its own ridge. In that
  ridge every normal kind of plot is allowed (including more classical
  ridgeline plots)
- progress towards supporting --gc:arc. No more =deepCopy= in use.
- add (not working yet) =scale_*_reverse= to reverse x and y
  scales. In principle it does work, but how to hand information to
  where its needed unclear (add to =FilledScales=, =GgPlot=, ... ?)
- add more recipes:
  - =rAnnotatedHeatmap.nim=: example of a heatmap overlaid with text
  - =rMultiSubplots.nim=: an example on how to use =ginger= to combine
    two plots to one subplot
  - =rPeriodicTable.nim=: creating a periodic table as a plot!

* v0.2.20
- move =font= helper to =ggplot_utils=
- remove spacing between multiple legends. Previously there was 1 cm
  of space if multiple legends were shown. That took too much space
  and wasn't required imo.
- fix classification by multiple discrete scales
- fix issue for discrete scales, which caused index error in
  =getView=, when a position was moved via =binPosition=
- add =width=, =height= to scales, which are collected. This was
  simply missing.
- add =geom_text=
- add =font= field to =GgStyle= object
- update =rMultipleLegends= due to spacing between two legends
- add recipes:
  - =rSimpleGeomText.nim=
  - =rClassifiedGeomText.nim=
  - =rAnnotateUsingGeomText.nim=
  - =rAnnotateMaxValues.nim=
- update =ginger= dependency to =v0.1.17=

* v0.2.19
Hotfix release for small regressions introduced in =v0.2.18=
- fixes the layout of plots discrete axes. Due to recent ginger changes
  the position of the ticks and tick labels was wrong.
- fixes the placement of =geom_tile= for discrete cases.
- updates all plots with discrete axes

* v0.2.18
- finally fixes multiple legends. Now automatically evenly spaced and centered
- distances of legends / labels to legend are now fixed in absolute
  units (thanks to fix in ginger =v0.1.15=)
- fix distance of tick labels to ticks, now also in fixed absolute
  distances (that's why every plot is updated)
- add =geom_tile=
- update *all* plots due to ginger fixes / placement of tick labels

* v0.2.17
- most geoms now take an =alpha= argument to override the alpha of
  =fillColor= 
- if a fill color of a line is set, the line is now continued down to
  the x axis

* v0.2.16
- =geom_point= with =positoin = "stack"= now draw points at =y = 0= 
- =geom_histogram/bar= now draw "empty" elements for =position =
  "stack"= (set =lineWidth= to 0 to make them disappear)
- y axes may now be discrete (previously only the x axis could be
  discrete)
- rewrites drawing code to have less duplication. For some kinds of
  plots this might (!) incur a tiny performance regression.
- refactors out code related to
  - collection and filling of scales:
    [[./src/ggplotnim/collect_and_scales.nim]] 
  - postprocessing of scales:
    [[./src/ggplotnim/postprocess_scales.nim]] 
  - (most) drawing code:
    [[./src/ggplotnim/ggplot_drawing.nim]]

* v0.2.15
- *IMPORTANT*: there was a bug in =seqmath.histogram=, which is used
  in =geom_histogram= / if =stat = "bin"= is used. The bug caused
  wrong histogram calculations *if and only if* unequal bin widths
  were used. Equal bin widhts were fine. This was fixed in =seqmath=
  =v0.1.7=
- add =geom_errorbar= for plots with error bars in x / y direction
- add =geom_linerange=, which are either error bars without an
  orthogonal line at the end (not "T" shaped, "|" like) or just, well,
  line ranges.
- slight performance increase for large datasets, due to avoiding
  running over data twice to determine min / max values.

* v0.2.14

- starts a changelog :)
- =formula.evaluate[T](node: FormulaNode, data: T): Value= is now
  =formula.reduce(node: FormulaNode, data: DataFrame): Value=. Generic usage
  is just clutter. =reduce= makes the intent clearer and opens up the
  name for an =evaluate= that returns a full vector
- adds =formula.evaluate(node: FormulaNode, data: DataFrame):
  PersistentVector[Value]=. 
- The =Scale.col= field is now =FormulaNode= instead of =string=. This
  allows for calculations on the DF to use for scales instead of only
  columns. 
- =aes()= is now generic and takes a mix of =string | FormulaNode= to
  allow to apply formulas to the DF w/o intermediate calculations on
  the DF manually. E.g. =aes(y = f{"yCol" * 2})= is now valid
- improve performance for certain plots with many geoms
- add inplace variants for =select=, =mutate=, =transmute=
  (=*Inplace=). 
